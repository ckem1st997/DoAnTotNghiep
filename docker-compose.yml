# if want use kong to database instead of db-less then un comment and set comment KONG_DATABASE: "off"
# and un comment the library relate to kong
# default kong gate use db-less by cache of the kong gate


version: '3.4'

services:

  #elasticsearch:
  #  container_name: elasticsearch
  #  build: ./deploy/elk/elasticsearch/
  #  image: tunnm/docker-es-cococ-tokenizer:7.12.1
  #  volumes:
  #    - ./deploy/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
  #  ports:
  #    - "9200:9200"
  #    - "9300:9300"
  #  environment:
  #    ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  #logstash:
  #  container_name: logstash
  #  restart: always
  #  build:
  #    context: deploy/elk/logstash/
  #  volumes:
  #    - ./deploy/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
  #    - ./deploy/elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
  #  ports:
  #    - "8080:8080"
  #  environment:
  #    LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #  depends_on:
  #    - elasticsearch

  #kibana:
  #  container_name: kibana
  #  build: ./deploy/elk/kibana/
  #  volumes:
  #    - ./deploy/elk/kibana/config/:/usr/share/kibana/config:ro
  #  ports:
  #    - "5601:5601"
  #  depends_on:
  #    - elasticsearch



  #zookeeper:
  #  image: confluentinc/cp-zookeeper:7.1.1
  #  hostname: zookeeper
  #  container_name: zookeeper
  #  ports:
  #    - "2181:2181"
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181
  #    ZOOKEEPER_TICK_TIME: 2000

  #broker:
  #  image: confluentinc/cp-server:7.1.1
  #  hostname: broker
  #  container_name: broker
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - "9092:9092"
  #    - "9101:9101"
  #  environment:
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #    KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #    KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #    KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #    KAFKA_JMX_PORT: 9101
  #    KAFKA_JMX_HOSTNAME: localhost
  #    KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #    CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
  #    CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #    CONFLUENT_METRICS_ENABLE: 'true'
  #    CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # manager:
  #   image: sheepkiller/kafka-manager
  #   container_name: managerKafka
  #   ports:
  #     - 9000:9000
  #   environment:
  #     - ZK_HOSTS=zookeeper:2181
  #   depends_on:
  #     - zookeeper
  # seq:
  #   image: datalust/seq:latest
  #   container_name: seqLogs
  #   environment:
  #     - ACCEPT_EULA=Y
  #   ports:
  #     - "5341:80"
  #   volumes:
  #     - ./storage/seq:/seq

  #ALTER SERVICE MASTER KEY FORCE REGENERATE;
  #sqlserver:
  #  build: ./deploy/sqlreplication/master
  #  container_name: sqlServer
  #  environment:
  #          SA_PASSWORD: "Aa!012345679"
  #          ACCEPT_EULA: "Y"
  #          MSSQL_AGENT_ENABLED: "true"
  #  ports:
  #    - "5433:1433"
  # volumes:
  #   - ./storage/sqlserver:/var/opt/mssql/data


#   sqlserver-slade-1:
#     build: ./deploy/sqlreplication/slade-1
#     hostname: sqlserver-slade-1
#     container_name: sqlserver-slade-1
#     environment:
#             SA_PASSWORD: "Aa!012345679"
#             ACCEPT_EULA: "Y"
#             MSSQL_AGENT_ENABLED: "true"
# # SP_CONFIGURE 'SHOW ADVANCE',1
# # GO
# # RECONFIGURE WITH OVERRIDE
# # GO
# # SP_CONFIGURE 'AGENT XPs',1
# # GO
# # RECONFIGURE WITH OVERRIDE
# # GO
#     ports:
#       - "5434:1433"
#     volumes:
#       - ./storage/sqlserver-slade-1:/var/opt/mssql/data
#     networks:
#       - replication

  # sqlserver-slade-2:
  #   build: ./deploy/sqlreplication/slade-1
  #   hostname: sqlserver-slade-2
  #   container_name: sqlserver-slade-2
  #   environment:
  #           SA_PASSWORD: "Aa!012345679"
  #           ACCEPT_EULA: "Y"
  #           MSSQL_AGENT_ENABLED: "true"
  #   ports:
  #     - "5435:1433"
  #   volumes:
  #     - ./storage/sqlserver-slade-2:/var/opt/mssql/data
  #   networks:
  #     - replication

  # redis:
  #   image: redis:alpine
  #   container_name: redisCache
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - ./storage/redis:/data/db

  # warehouse-api:
  #  image: meoh0ang97/warehouse.api:${PLATFORM:-linux}-${TAG:-latest} #${REGISTRY:-doantotnghiep}/warehouse.api:${PLATFORM:-linux}-${TAG:-latest}
  #  container_name: wh-api
  #  build:
  #    context: .
  #    dockerfile: src/Services/WareHouse/WareHouse.API/Dockerfile
  #  depends_on:
  #    - redis
      
      
  #  environment:
  #    - ASPNETCORE_ENVIRONMENT=Production
  #    - ASPNETCORE_URLS=http://0.0.0.0:5005
  #    - GRPC_PORT=5006
  #    - PORT=5005
  #  ports:
  #    - "5005:5005"
  #    - "5006:5006"

  master-api:
    image: meoh0ang97/master.api:${PLATFORM:-linux}-${TAG:-latest} #doantotnghiep.azurecr.io/master-api:latest
    container_name: mt-api
    build:
      context: .
      dockerfile: src/Services/Master/Master/Dockerfile
    # depends_on:
    #   - redis
      
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - GRPC_PORT=50000
      - PORT=80
    ports:
      - "50001:80"
      - "50000:50000"
   
  # kong-database:
  #   image: postgres:9.6
  #   container_name: kong-database
  #   environment:
  #       POSTGRES_USER: kong
  #       POSTGRES_DB: kong
  #       POSTGRES_PASSWORD: kong
  #   ports:
  #       - "5432:5432"
  #   volumes:
  #       - ./storage/kong-database:/var/lib/postgresql/data
  #   networks:
  #       - kong-net 
    
  # kong-migrations:
  #   image: kong:latest
  #   container_name: kong-migrations
  #   restart: on-failure
  #   depends_on:
  #       - kong-database
  #   links:
  #       - kong-database:kong-database
  #   environment:
  #       KONG_DATABASE: postgres
  #       KONG_PG_HOST: kong-database
  #       KONG_PG_USER: kong
  #       KONG_PG_PASSWORD: kong
  #       KONG_CASSANDRA_CONTACT_POINTS: kong-database
  #   entrypoint: sh -c "sleep 100 && kong migrations bootstrap --vv"
  #   networks:
  #       - kong-net
            
  # kong:
  #  image: meoh0ang97/kong.api:${PLATFORM:-linux}-${TAG:-latest} #kong:latest
  #  build: ./deploy/kong/
  #  container_name: kongapiGateway
  #  restart: on-failure
  #  # links:
  #  #     - kong-database:kong-database
  #  networks:
  #      - kong-net
  #  environment:
  #      # KONG_DATABASE: postgres
  #      #add
  #      KONG_DATABASE: "off"

  #      KONG_PG_HOST: kong-database
  #      KONG_PG_USER: kong
  #      KONG_PG_PASSWORD: kong
  #      KONG_CASSANDRA_CONTACT_POINTS: kong-database
  #      KONG_PROXY_ACCESS_LOG: /dev/stdout
  #      KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #      KONG_PROXY_ERROR_LOG: /dev/stderr
  #      KONG_ADMIN_ERROR_LOG: /dev/stderr
  #      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
  #      KONG_LOG_LEVEL: warn
  #      # da tu dong copy vo trong thu muc nho luc build
  #      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
  #  # add
  #  # buid va push len docker.io sau do them image vo cloud va set up bien moi truong
  #  # cac thao tac da duoc xu ly ben docker
  #  healthcheck:
  #    test: ["CMD", "kong", "health"]
  #    interval: 120s
  #    timeout: 10s
  #    retries: 3
  #    # set up port o day ra sao thi trong k8s se chay vay
  #  ports:
  #      - "8000:8000"
  #      - "8443:8443"
  #      - "8001:8001"
  #      - "8444:8444"

  #   #add
  #  volumes:
  #   - ./deploy/kong/logs:/usr/local/kong/logs       
  #   - ./deploy/kong/logs/log.txt:/usr/local/kong/logs/log.txt       
  #   - ./deploy/kong/declarative:/usr/local/kong/declarative       
  #   - ./deploy/kong/config/nginx.conf:/usr/local/kong/nginx.conf       
  #   - ./deploy/kong/config/nginx-kong.conf:/usr/local/kong/nginx-kong.conf 
    
  # konga-prepare:
  #     image: pantsel/konga
  #     container_name: konga-prepare
  #     command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga"
  #     networks:
  #         - kong-net
  #     restart: on-failure
  #     links:
  #         - kong-database:kong-database
  #     depends_on:
  #         - kong-database
  
  # konga:
  #     image: pantsel/konga
  #     container_name: kongaManager
  #     restart: on-failure
  #     links:
  #         - kong-database:kong-database
  #     depends_on:
  #         - kong-database
  #     networks:
  #         - kong-net
  #     environment:
  #         DB_ADAPTER: postgres
  #         DB_HOST: kong-database
  #         DB_PORT: 5432
  #         DB_USER: kong
  #         DB_PASSWORD: kong
  #         DB_DATABASE: konga
  #         KONGA_HOOK_TIMEOUT: 120000
  #         NODE_ENV: production  
  #     ports:
  #         - "1337:1337"
  #     volumes:
  #         - ./storage/konga:/konga
          
  # angular:
  #   image: meoh0ang97/client:${PLATFORM:-linux}-${TAG:-latest}
  #   container_name: angular
  #   build:
  #     context: src/WebClient/WareHouse/
  #     dockerfile: ./Dockerfile
  #   environment:
  #       NODE_ENV: production
  #   # depends_on:
  #   #   - master-api
  #   ports:
  #       - 4200:80


#volumes: 
#  keycloak_sso_vol:
# networks:
#  kong-net:
#    name: kong-net
#    driver: bridge
        
    

